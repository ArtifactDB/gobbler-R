% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uploadDirectory.R
\name{uploadDirectory}
\alias{uploadDirectory}
\title{Upload a directory's contents}
\usage{
uploadDirectory(
  project,
  asset,
  version,
  directory,
  staging,
  url,
  probation = FALSE,
  consume = NULL,
  ignore.. = TRUE,
  spoof = NULL,
  concurrent = 1L
)
}
\arguments{
\item{project}{String containing an existing project name.}

\item{asset}{String containing a new or existing asset name in \code{project}.}

\item{version}{String containing the name of a new version of \code{asset}.}

\item{directory}{String containing the path to a directory to be uploaded.
This should be inside \code{staging} for best performance, typically using the directory allocated by \code{\link{allocateUploadDirectory}}.
Otherwise, the contents of \code{directory} will be copied to \code{staging} prior to upload.}

\item{staging}{String containing the path to the staging directory.}

\item{url}{String containing the URL of the gobbler REST API.}

\item{probation}{Logical scalar indicating whether to upload a probational version.}

\item{consume}{Logical scalar indicating whether the contents of \code{directory} can be consumed by the upload process.
If \code{TRUE}, the Gobbler will attempt to move files from \code{directory} into the registry.
Otherwise, the contents of \code{directory} will not be modified by the upload.
Defaults to \code{TRUE} if the contents of \code{directory} need to be copied to \code{staging}.}

\item{ignore..}{Logical scalar indicating whether to skip dotfiles in \code{directory} during upload.}

\item{spoof}{String containing the name of a user on whose behalf this request is being made.
This should only be used if the Gobbler service allows spoofing by the current user. 
If \code{NULL}, no spoofing is performed.}

\item{concurrent}{Integer specifying the number of concurrent downloads.
Only used if files need to be copied from \code{directory} to \code{staging}.}
}
\value{
On success, \code{NULL} is invisibly returned.
}
\description{
Upload a directory as a new versioned asset of a project in the Gobbler registry.
}
\details{
If \code{directory} is not inside \code{staging}, a new staging subdirectory is allocated by \code{\link{allocateUploadDirectory}}.
The contents of \code{directory} are then copied to the new subdirectory, preserving all symbolic links, dotfiles and empty directories.
If \code{consume=NULL}, it is set to \code{TRUE} as the copied contents will no longer be used.
}
\examples{
info <- startGobbler()
removeProject("test", info$staging, url=info$url) # start with a clean slate.
createProject("test", info$staging, url=info$url)

src <- allocateUploadDirectory(info$staging)
write(file=file.path(src, "foo"), "BAR")

uploadDirectory(
    project="test", 
    asset="simple", 
    version="v1", 
    directory=src, 
    staging=info$staging,
    url=info$url
)

}
\seealso{
\code{\link{createProject}}, to create a new project for uploads.

\code{\link{versionPath}}, to obtain the path to a versioned asset's contents inside the registry.

\code{\link{fetchManifest}}, to obtain the manifest of the versioned asset's contents.
}
\author{
Aaron Lun
}
