% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setPermissions.R
\name{setPermissions}
\alias{setPermissions}
\title{Set project permissions}
\usage{
setPermissions(
  project,
  registry,
  staging,
  url,
  asset = NULL,
  owners = NULL,
  uploaders = NULL,
  globalWrite = NULL,
  append = TRUE,
  spoof = NULL,
  dryRun = FALSE
)
}
\arguments{
\item{project}{String containing the project name.}

\item{registry}{String containing a path to the registry.}

\item{staging}{String containing the path to the staging directory.}

\item{url}{String containing the URL of the gobbler REST API.}

\item{asset}{String containing the asset name.
If specified, permissions are set on the asset rather than the entire project.}

\item{owners}{Character vector containing the user IDs for owners of this project/asset.
If \code{NULL}, no change is made to the existing owners of the project.}

\item{uploaders}{List specifying the authorized uploaders for this project/asset.
See the \code{uploaders} field in the \code{\link{fetchPermissions}} return value for the expected format. 
If \code{NULL}, no change is made to the existing uploaders of the project/asset.}

\item{globalWrite}{Logical scalar indicating whether global writes should be enabled (see \code{\link{fetchPermissions}} for details).
If \code{NULL}, no change is made to the global write status of the project.
Ignored if \code{asset} is specified.}

\item{append}{Logical scalar indicating whether \code{owners} and \code{uploaders} should be appended to the existing owners and uploaders, respectively, of the project/asset.
If \code{FALSE}, the \code{owners} and \code{uploaders} are used to replace the existing values.}

\item{spoof}{String containing the name of a user on whose behalf this request is being made.
This should only be used if the Gobbler service allows spoofing by the current user. 
If \code{NULL}, no spoofing is performed.}

\item{dryRun}{Logical scalar indicating whether to return the new permissions without actually modifying the registry.}
}
\value{
If \code{dryRun=FALSE}, \code{NULL} is invisibly returned upon successful setting of the permissions.

If \code{dryRun=TRUE}, a named list is returned containing the new permissions for the project/asset.
This contains zero, one or more of \code{owners}, \code{uploaders} and \code{global_write} (see \code{\link{fetchPermissions}} for descriptions).
A missing field indicates that it will not be updated in the project/asset permissions.
}
\description{
Set the owner and uploader permissions for a project.
}
\examples{
info <- startGobbler()
removeProject("test", info$staging, url=info$url) # start with a clean slate.
createProject("test", info$staging, url=info$url)

# Mocking up an upload. 
src <- allocateUploadDirectory(info$staging)
write(file=file.path(src, "foo"), "BAR")
uploadDirectory("test", "simple", "v1", src, staging=info$staging, url=info$url)
fetchPermissions("test", registry=info$registry)

# Setting them to something else.
setPermissions("test", 
    owners=c("mum", "dad"), 
    uploaders=list(
        list(id='brother1', asset='ps5', until=Sys.time() + 100000),
        list(id='brother2', asset='harry_potter', version='goblet_of_fire')
    ),
    staging=info$staging,
    url=info$url,
    registry=info$registry
)
fetchPermissions("test", registry=info$registry)

}
\seealso{
\code{\link{fetchPermissions}}, to fetch the permissions.

\code{\link{createProject}}, to set permissions during project creation.
}
\author{
Aaron Lun
}
