% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cloneVersion.R
\name{cloneVersion}
\alias{cloneVersion}
\title{Clone a version's directory structure}
\usage{
cloneVersion(project, asset, version, destination, registry)
}
\arguments{
\item{project}{String containing the project name.}

\item{asset}{String containing the asset name.}

\item{version}{String containing the version name.}

\item{destination}{String containing a path to a destination directory at which to create the clone.}

\item{registry}{String containing the path to the registry.}
}
\value{
The directory structure of the specified version is cloned to \code{destination},
and a \code{NULL} is invisibly returned.
}
\description{
Clone the directory structure for a versioned asset into a separate location.
This is typically used to prepare a new version for a lightweight upload.
}
\details{
Cloning involves creating a directory at \code{destination} that has the same structure as that of the specified project-asset-version.
All files in the version are represented as symlinks from \code{destination} to the corresponding file in the \code{registry}. 
The idea is that, when \code{destination} is used in \code{\link{uploadDirectory}}, the symlinks are converted into upload links.
This allows users to create new versions very cheaply as duplicate files are not uploaded to/stored in the backend.

Users can more-or-less do whatever they want inside the cloned \code{destination}, 
but the symlink targets should be read-only as they refer to immutable files in the \code{registry}.
If a file in \code{destination} needs to be modified, the symlink should be deleted and replaced with a new file.
}
\examples{
info <- startGobbler()
removeProject("test", info$staging, url=info$url) # start with a clean slate.
createProject("test", info$staging, url=info$url)

# Mocking up an upload. 
src <- allocateUploadDirectory(info$staging)
write(file=file.path(src, "foo"), "BAR")
res <- uploadDirectory("test", "simple", "v1", src, staging=info$staging, url=info$url)

# Creating a clone.
dest <- tempfile()
out <- cloneVersion("test", "simple", "v1", dest, registry=info$registry)
list.files(dest, recursive=TRUE)
Sys.readlink(file.path(dest, "foo"))
readLines(file.path(dest, "foo"))

# Files should be replaced rather than modified via the symlink:
existing <- file.path(dest, "foo")
unlink(existing) # Deleting the symlink...
write(file=existing, "YAY") # ... and writing a replacement file.

}
\seealso{
\code{\link{allocateUploadDirectory}}, to obtain a possible value for \code{destination}.

\code{\link{uploadDirectory}}, to prepare an upload based on the directory contents.
}
\author{
Aaron Lun
}
